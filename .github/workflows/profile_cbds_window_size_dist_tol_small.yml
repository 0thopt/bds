name: Profile cbds with window size and dist tol, small

on:
  # Trigger the workflow on # push or pull request
  # push:
  # Trigger the workflow manually
  schedule:
  - cron: '0 0 */2 * *'
  workflow_dispatch:

jobs:
  test:
    name: Profile cbds with window size and dist tol, small
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        matlab: [latest]
        dim: [small]
        with_optim_toolbox: [yes]
        feature: [plain, noisy_1e-3, linearly_transformed, rotation_noisy_1e-3]

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          ref: development

      - name: Checkout OptiProfiler
        uses: actions/checkout@v4
        with:
          repository: optiprofiler/optiprofiler
          path: optiprofiler
          submodules: recursive
          ref: c71d78a4dd0838fb1925e3c97885aded39fffe38

      - name: Install Texlive
        run: sudo apt-get update && sudo apt-get install texlive

      - name: Check whether LaTeX is installed
        run: pdflatex --version

      - name: Cache MATLAB
        id: cache-matlab
        uses: actions/cache@v4
        with:
          path: ${{ runner.tool_cache }}/MATLAB
          key: ${{ matrix.os }}-${{ matrix.matlab }}-${{ matrix.with_optim_toolbox }}

      - name: Set up MATLAB with optimization toolbox
        if: ${{ matrix.with_optim_toolbox == 'yes' }}
        uses: matlab-actions/setup-matlab@v2.1.2
        with:
          release: ${{ matrix.matlab }}
          products: Optimization_Toolbox

      - name: Run test
        uses: matlab-actions/run-command@v2.1.1
        with:
            command: |
              root_dir = pwd()
              ls
  
              % Setup optiprofiler
              cd(fullfile(root_dir, 'optiprofiler'));
              setup
              cd(root_dir);
  
              % Setup bds
              setup
              cd(fullfile(root_dir, 'tests'));
              addpath(pwd);
  
              % Start tuning
              cd(fullfile(root_dir, 'tests', 'tuning'));
              parameters.window_size = 10:2:20;
              parameters.dist_tol = 10.^(-4:-2:-16);
              options = struct();
              if ~isfield(options, 'n_runs')
                  options.n_runs = 1;
              end
              options.p_type = 'u';
              % tau_weights should be a 2xmax_tol_orderx2x3 numeric array, where the sum of all 
              % elements is 1. Normally, the max_tol_order is set to be 10.
              if ~isfield(options, 'max_tol_order')
                  options.max_tol_order = 10;
              end
              % To improve the score of output-base performance profile, we can set the value of
              % last two elements of tau_weights(1, 1:max_tol_order, 2, 1) is 0.02 and the value of
              % the first 1:max_tol_order-2 elements is 0.96/(max_tol_order-2). The rest of the elements
              % in tau_weights are set to 0.
              options.tau_weights = zeros(2, options.max_tol_order, 2, 3);
              options.tau_weights(1, 1:options.max_tol_order, 2, 1) = [0.96/(options.max_tol_order-2)*ones(1, options.max_tol_order-2), 0.02, 0.02]; 
              if sum(options.tau_weights(:)) ~= 1
                  error('Sum of tau_weights must be 1');
              end
              % Check if max_tol_order is equal to the length of tau_weights.
              if  (options.max_tol_order ~= size(options.tau_weights, 2))
                  error('max_tol_order must be equal to the length of tau_weights');
              end
              options.feature_name = ${{ matrix.feature }};
              fprintf('Feature:\t %s\n', options.feature_name);
              tuning_script_optiprofiler(parameters, options);
              cd(root_dir);
    
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tuning_dist_tol_small
          path: ./tests/tuning/tuning_data/**

  