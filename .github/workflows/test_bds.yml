name: Use MatCUTEst in GitHub Actions

on:
  # Trigger the workflow on push or pull request
  push:
  # Trigger the workflow manually
  workflow_dispatch:

env:
    GFORTRAN_VERSION: 12

jobs:

  test:

    name: Profile blockwise direct search.
    runs-on: ${{matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        matlab: [latest]
        solver: [blockwise_direct_search]
        solver_label: [GS]
        solver_tag: [GS]
        solver_nb_tag: [n]
        competitor: [blockwise_direct_search, newuoa, matlab_fminsearch, matlab_fminunc]

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Clone PRIMA
        uses: actions/checkout@v3
        with:
          repository: libprima/prima
          path: prima

      - name: Clone MatCUTEst
        uses: actions/checkout@v3
        with:
          repository: equipez/matcutest_compiled
          path: matcutest


      - name: Link gfortran for MATLAB on Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          GFVER=12
          if [[ "${{ matrix.os }}" = "ubuntu-20.04" ]] ; then
              GFVER=11
          fi
          if [[ "${{ matrix.matlab }}" = "R2020a" || "${{ matrix.matlab }}" = "R2020b" \
             || "${{ matrix.matlab }}" = "R2021a" || "${{ matrix.matlab }}" = "R2021b" ]] ; then
              GFVER=9
          fi
          bash .github/scripts/link_gfortran "$GFVER"

      - name: Install epstopdf and ghostscript
        if: startsWith(matrix.os, 'ubuntu')
        run: bash .github/scripts/install_epstopdf && bash .github/scripts/install_ghostscript

      - name: Cache MATLAB
        id: cache-matlab
        uses: actions/cache@v3.3.1
        with:
          path: ${{ runner.tool_cache }}/MATLAB
          key: ${{ matrix.os }}-${{ matrix.matlab }}

      - name: Set up MATLAB
        uses: matlab-actions/setup-matlab@v2-beta

      - name: Run tests
        uses: matlab-actions/run-command@v1.2.0
        with:
          command: |
            root_dir = pwd()

            % Install MatCUTEst
            cd(fullfile(root_dir, 'matcutest'));
            install(); cd(root_dir);

            % Check the installation
            help matcutest, which('macup'), which('decup'), which('secup')

            % Conduct your tests
            path_tests = fullfile(root_dir, 'tests');
            old_path = cd(path_tests)
            parameters.blocks_strategy = ["Gauss-Seidel", "Randomized_array"];
            parameters.parallel = true;
            if strcmp('${{ matrix.competitor }}', 'blockwise_direct_search')
                parameters.solvers_invoke = ["${{ matrix.solver }}", "blockwise_direct_search"];
                parameters.solvers_label = ["GS", "Randomized(array)"];
                parameters.solvers_tag = ["GS", "Randomized_array"];
                parameters.nb_tag = ["n", "no"];
                testbds_input(parameters);
            elseif strcmp('${{ matrix.competitor }}', 'newuoa')
                parameters.solvers_invoke = ["${{ matrix.solver }}", "newuoa"];
                parameters.solvers_label = ["GS", "newuoa"];
                parameters.solvers_tag = ["GS", "newuoa"];
                parameters.nb_tag = ["n", "no"];
                testbds_input(parameters);
            elseif strcmp('${{ matrix.competitor }}', 'matlab_fminsearch')
                parameters.solvers_invoke = ["${{ matrix.solver }}", "matlab_fminsearch"];
                parameters.solvers_label = ["GS", "simplex"];
                parameters.solvers_label = ["GS", "simplex"];
                parameters.nb_tag = ["nb", "no"];
            elseif strcmp('${{ matrix.competitor }}', 'matlab_fminunc')
                parameters.solvers_invoke = ["${{ matrix.solver }}", "matlab_fminunc"];
                parameters.solvers_label = ["GS", "bfgs"];
                parameters.solvers_label = ["GS", "bfgs"];
                parameters.nb_tag = ["n", "no"];
            end
            path_artifact = fullfile(path_tests, 'testdata');
            cd(old_path)

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: path_artifact
