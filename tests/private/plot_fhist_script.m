clear all;
solvers_options = {};
test_options = struct();

parameters.problem_type = "u";
parameters.problem_mindim = 20;
parameters.problem_maxdim = 20;

if ~isfield(parameters, "test_type")
    parameters.test_type = "s2mpj";
end

% Get the problem names.
if isfield(parameters, "test_type") && strcmpi(parameters.test_type, "matcutest")

    s.type = parameters.problem_type; % Unconstrained: 'u'
    s.mindim = parameters.problem_mindim; % Minimum of dimension
    s.maxdim = parameters.problem_maxdim; % Maximum of dimension
    s.blacklist = [];

    % Problems that take too long to solve.
    s.blacklist = [s.blacklist, { 'ARGTRIGLS', 'BROWNAL', ...
        'COATING', 'DIAMON2DLS', 'DIAMON3DLS', 'DMN15102LS', ...
        'DMN15103LS', 'DMN15332LS', 'DMN15333LS', 'DMN37142LS', ...
        'DMN37143LS', 'ERRINRSM', 'HYDC20LS', 'LRA9A', ...
        'LRCOVTYPE', 'LUKSAN12LS', 'LUKSAN14LS', 'LUKSAN17LS', 'LUKSAN21LS', ...
        'LUKSAN22LS', 'MANCINO', 'PENALTY2', 'PENALTY3', 'VARDIM',
        }];

    if isfield(parameters, "problem_names")
        problem_names = parameters.problem_names;
    else
        problem_names = secup(s);
    end
else
    s = load('probinfo.mat');
    blacklist = ["DIAMON2DLS",...
        "DIAMON2D",...
        "DIAMON3DLS",...
        "DIAMON3D",...
        "DMN15102LS",...
        "DMN15102",...
        "DMN15103LS",...
        "DMN15103",...
        "DMN15332LS",...
        "DMN15332",...
        "DMN15333LS",...
        "DMN15333",...
        "DMN37142LS",...
        "DMN37142",...
        "DMN37143LS",...
        "DMN37143",...
        "ROSSIMP3_mp"];
    blacklist_time_consuming = ["BAmL1SPLS",...
        "FBRAIN3LS",...
        "GAUSS1LS",...
        "GAUSS2LS",...
        "GAUSS3LS",...
        "HYDC20LS",...
        "HYDCAR6LS",...
        "LUKSAN11LS",...
        "LUKSAN12LS",...
        "LUKSAN13LS",...
        "LUKSAN14LS",...
        "LUKSAN17LS",...
        "LUKSAN21LS",...
        "LUKSAN22LS",...
        "METHANB8LS",...
        "METHANL8LS",...
        "SPINLS",...
        "VESUVIALS",...
        "VESUVIOLS",...
        "VESUVIOULS",...
        "YATP1CLS"];
    problem_names = [];
    for i = 2:length(s.problem_data)
        if strcmpi(s.problem_data(i, 2), parameters.problem_type) && ...
                cell2mat(s.problem_data(i, 3)) >= parameters.problem_mindim && ...
                cell2mat(s.problem_data(i, 3)) <= parameters.problem_maxdim && ...
                ~ismember(s.problem_data(i, 1), blacklist) && ...
                ~ismember(s.problem_data(i, 1), blacklist_time_consuming)
            problem_names = [problem_names, s.problem_data(i, 1)];
        end
    end
    path_S2MPJ_matlab_problems = strcat(fileparts(fileparts(mfilename('fullpath'))), "/matlab_problems/");
    if ~contains(path, path_S2MPJ_matlab_problems, 'IgnoreCase', true)
        if exist(path_S2MPJ_matlab_problems, 'dir') == 7
            addpath(path_S2MPJ_matlab_problems);
            disp('Add path_S2MPJ_matlab_problems to MATLAB path.');
        else
            disp('path_S2MPJ_matlab_problems does not exist on the local machine.');
        end
    else
        disp('Path_S2MPJ_matlab_problems already exists in MATLAB path.');
    end
end

fprintf("We will load %d problems\n\n", length(problem_names));


solvers_options{1}.solver = "bds";
solvers_options{1}.Algorithm = "ds";
solvers_options{2}.solver = "prima_wrapper";
solvers_options{2}.Algorithm = "newuoa";

test_options.is_noisy = true;
test_options.noise_level = 1e-3;
test_options.is_abs_noise = false;
test_options.noise_type = "gaussian";

% We use time_str to distinguish different test results.
time_str = char(datetime('now', 'Format', 'yyyy-MM-dd HH:mm'));
% Trim time string.
time_str = trim_time(time_str);

path_testdata = fullfile(fileparts(fileparts(mfilename('fullpath'))), 'testdata');
if test_options.is_noisy
    fhist_features = "fhist" + "_" + solvers_options{1}.solver + "_" + solvers_options{2}.solver + "_" ...
    + num2str(parameters.problem_mindim) + "_" + num2str(parameters.problem_maxdim) ...
    + "_noisy" + "_" + num2str(log10(test_options.noise_level)) + "_" + parameters.test_type + "_" + time_str;
else
    fhist_features = "fhist" + "_" + solvers_options{1}.solver + "_" + solvers_options{2}.solver + "_" ...
    + num2str(parameters.problem_mindim) + "_" + num2str(parameters.problem_maxdim) ...
    + "_plain" + "_" + parameters.test_type + "_" + time_str;
end
saved_dir = fullfile(path_testdata, fhist_features);
mkdir(saved_dir);
path_competitors = fullfile(fileparts(fileparts(mfilename('fullpath'))), 'competitors');
addpath(path_competitors);

for i_problem = 1:length(problem_names)
    if isfield(parameters, "test_type") && strcmpi(parameters.test_type, "matcutest")
        p = macup(problem_names(1, i_problem));
    else
        p = loader(problem_names{1, i_problem});
    end
    get_fhist_one_problem(p, solvers_options, test_options, saved_dir);
end

