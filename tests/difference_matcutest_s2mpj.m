function difference_matcutest_s2mpj(parameters)

% Set the problem type if it is not set.
if ~isfield(parameters, "problem_type")
    parameters.problem_type = "u";
end

if ~isfield(parameters, "problem_mindim")
    error("The field problem_mindim is not set.");
end

if ~isfield(parameters, "problem_maxdim")
    error("The field problem_maxdim is not set.");
end

s2mpj_problems = load('probinfo.mat');
blacklist = ["DIAMON2DLS",...
    "DIAMON2D",...
    "DIAMON3DLS",...
    "DIAMON3D",...
    "DMN15102LS",...
    "DMN15102",...
    "DMN15103LS",...
    "DMN15103",...
    "DMN15332LS",...
    "DMN15332",...
    "DMN15333LS",...
    "DMN15333",...
    "DMN37142LS",...
    "DMN37142",...
    "DMN37143LS",...
    "DMN37143",...
    "ROSSIMP3_mp"];
blacklist_time_consuming = ["BAmL1SPLS",...
    "FBRAIN3LS",...
    "GAUSS1LS",...
    "GAUSS2LS",...
    "GAUSS3LS",...
    "HYDC20LS",...
    "HYDCAR6LS",...
    "LUKSAN11LS",...
    "LUKSAN12LS",...
    "LUKSAN13LS",...
    "LUKSAN14LS",...
    "LUKSAN17LS",...
    "LUKSAN21LS",...
    "LUKSAN22LS",...
    "METHANB8LS",...
    "METHANL8LS",...
    "SPINLS",...
    "VESUVIALS",...
    "VESUVIOLS",...
    "VESUVIOULS",...
    "YATP1CLS"];
s2mpj_problem_names = [];
for i = 2:length(s2mpj_problems.problem_data)
    if strcmpi( s2mpj_problems.problem_data(i, 2), parameters.problem_type) && ...
            cell2mat(s2mpj_problems.problem_data(i, 3)) >= parameters.problem_mindim && ...
            cell2mat(s2mpj_problems.problem_data(i, 3)) <= parameters.problem_maxdim && ...
            ~ismember(s2mpj_problems.problem_data(i, 1), blacklist) && ...
            ~ismember(s2mpj_problems.problem_data(i, 1), blacklist_time_consuming)
        s2mpj_problem_names = [s2mpj_problem_names, s2mpj_problems.problem_data(i, 1)];
    end
end

s.type = parameters.problem_type; % Unconstrained: 'u'
s.mindim = parameters.problem_mindim; % Minimum of dimension
s.maxdim = parameters.problem_maxdim; % Maximum of dimension
s.blacklist = [];
s.blacklist = [s.blacklist, { 'ARGTRIGLS', 'BROWNAL', ...
    'COATING', 'DIAMON2DLS', 'DIAMON3DLS', 'DMN15102LS', ...
    'DMN15103LS', 'DMN15332LS', 'DMN15333LS', 'DMN37142LS', ...
    'DMN37143LS', 'ERRINRSM', 'HYDC20LS', 'LRA9A', ...
    'LRCOVTYPE', 'LUKSAN12LS', 'LUKSAN14LS', 'LUKSAN17LS', 'LUKSAN21LS', ...
    'LUKSAN22LS', 'MANCINO', 'PENALTY2', 'PENALTY3', 'VARDIM',
    }];
matcutest_problem_names = secup(s);

current_path = mfilename("fullpath");
path_tests = fileparts(current_path);
% If the folder of testdata does not exist, make a new one.
path_testdata = fullfile(path_tests, "testdata");
if ~exist(path_testdata, "dir")
    mkdir(path_testdata);
end

path_S2MPJ_matlab_problems = strcat(fileparts(mfilename('fullpath')), "/matlab_problems/");
if ~contains(path, path_S2MPJ_matlab_problems, 'IgnoreCase', true)
    if exist(path_S2MPJ_matlab_problems, 'dir') == 7
        addpath(path_S2MPJ_matlab_problems);
        disp('Add path_S2MPJ_matlab_problems to MATLAB path.');
    else
        disp('path_S2MPJ_matlab_problems does not exist on the local machine.');
    end
else
    disp('Path_S2MPJ_matlab_problems already exists in MATLAB path.');
end

common_problem_names = intersect(s2mpj_problem_names, matcutest_problem_names);

file_path = strcat(path_testdata, "/common_problem_dim_", num2str(parameters.problem_mindim), "_", num2str(parameters.problem_maxdim), "_", parameters.problem_type, ".txt");

% Open the file and write line by line.
fid = fopen(file_path, 'w');
for i_problem = 1:length(common_problem_names)
    p_matcutest = macup(common_problem_names(1, i_problem));
    problem_orig = str2func(char(common_problem_names(i_problem)));
    problem_info = problem_orig('setup');
    p_s2mpj = s2mpj_wrapper(problem_info, common_problem_names(1, i_problem));
    if length(p_matcutest.x0) ~= length(p_s2mpj.x0)
        fprintf(fid, '%s        %s:%s        %s:%s\n', common_problem_names{i_problem}, "matcutest_dim", num2str(length(p_matcutest.x0)), "s2mpj_dim", num2str(length(p_s2mpj.x0)));
    else
        fprintf(fid, '%s\n', common_problem_names{i_problem});
    end
end
fclose(fid);

end

